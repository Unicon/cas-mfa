// Generated by delombok at Mon Mar 10 08:01:35 CST 2014
package com.toopher.integrations.cas.authentication.handler;

import com.toopher.api.ToopherIframe;
import com.toopher.integrations.cas.ToopherConfig;
import com.toopher.integrations.cas.authentication.principal.ToopherCredentials;
import org.jasig.cas.authentication.handler.AuthenticationException;
import org.jasig.cas.authentication.handler.AuthenticationHandler;
import org.jasig.cas.authentication.principal.Credentials;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;

public class ToopherAuthenticationHandler implements AuthenticationHandler {

    public class ToopherAuthenticationException extends AuthenticationException {

        private static final long serialVersionUID = 355117992040392653L;

        public ToopherAuthenticationException(final String code, final String message, final String type) {
            super(code, message, type);
        }
    }

    private ToopherConfig toopherConfig;
    private static final String PAIRING_DEACTIVATED = "707";
    private static final String USER_OPT_OUT = "704";
    private static final String USER_UNKNOWN = "705";
    private static final String OTHER_ERROR = "601";
    private static final String PAIRING_NOT_AUTHORIZED_SIG = "Pairing has not been authorized to authenticate";

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    @Override
    public boolean authenticate(final Credentials credentials) throws AuthenticationException {
        final ToopherCredentials toopherCredentials = (ToopherCredentials) credentials;
        logger.debug("Authenticate: username=" + toopherCredentials.getUsername());

        checkAndThrowToopherAuthenticationExceptions(toopherCredentials.getRequestParameters());

        final Map<String, String> validatedData = ToopherIframe.validate(toopherConfig.getConsumerSecret(), toopherCredentials.getRequestParameters(), 100);
        if (validatedData == null) {
            throw new ToopherAuthenticationException("toopher.authentication.error.invalid_signature",
                    "Invalid signature returned by Toopher API", "toopherInvalidSignature");
        }
        if (validatedData.containsKey("session_token")) {
            final String toopherAuthSessionToken = validatedData.get("session_token");
            if (!toopherAuthSessionToken.equals(toopherCredentials.getLoginTicketId())) {
                logger.warn("valid data, but for a different loginTokenID!");
                return false;
            }
        }

        checkAndThrowToopherAuthenticationExceptions(validatedData);

        final boolean authPending = validatedData.get("pending").toLowerCase().equals("true");
        final boolean authGranted = validatedData.get("granted").toLowerCase().equals("true");
        return authGranted && !authPending;

    }

    @Override
    public boolean supports(final Credentials credentials) {
        return (credentials.getClass() == ToopherCredentials.class);
    }

    @java.lang.SuppressWarnings("all")
    public ToopherConfig getToopherConfig() {
        return this.toopherConfig;
    }

    @java.lang.SuppressWarnings("all")
    public void setToopherConfig(final ToopherConfig toopherConfig) {
        this.toopherConfig = toopherConfig;
    }

    /**
     * Check and throw toopher authentication exceptions.
     *
     * @param data the data
     * @throws ToopherAuthenticationException the toopher authentication exception
     */
    private void checkAndThrowToopherAuthenticationExceptions(final Map<String, String> data) throws ToopherAuthenticationException {
        if (data.containsKey("error_code")) {
            final String errorCode = data.get("error_code");
            final String errorMessage = data.get("error_message");
            logger.error("Received error flag from Toopher [{}]:[{}]", errorCode, errorMessage);

            if (errorCode.equals(PAIRING_DEACTIVATED)) {
                throw new ToopherAuthenticationException("toopher.authentication.error.pairing_deactivated", "Pairing has been deactivated", "toopherPairingDeactivated");
            } else if (errorCode.equals(USER_OPT_OUT)) {
                throw new ToopherAuthenticationException("toopher.authentication.error.user_opt_out", "User has opted-out of Toopher Authentication", "toopherUserOptOut");
            } else if (errorCode.equals(USER_UNKNOWN)) {
                throw new ToopherAuthenticationException("toopher.authentication.error.user_unknown", "No matching user found in Toopher API", "toopherUserUnknown");
            } else if (errorCode.equals(OTHER_ERROR) && errorMessage.contains(PAIRING_NOT_AUTHORIZED_SIG)) {
                throw new ToopherAuthenticationException("toopher.authentication.error.pairing_not_authorized", "Pairing has not been authorized on the mobile device", "toopherPairingNotAuthorized");
            } else {
                logger.warn("Unknown error returned by Toopher API: error_code = " + errorCode + ", error_message = \'" + errorMessage + "\'");
                throw new ToopherAuthenticationException("toopher.authentication.error.unknown", "Unknown error returned by Toopher API", "toopherUnknownError");
            }
        }
    }
}
