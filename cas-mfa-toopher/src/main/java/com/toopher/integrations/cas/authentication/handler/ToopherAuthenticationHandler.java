// Generated by delombok at Mon Mar 10 08:01:35 CST 2014
package com.toopher.integrations.cas.authentication.handler;

import java.util.Map;
import org.jasig.cas.authentication.handler.AuthenticationException;
import org.jasig.cas.authentication.handler.AuthenticationHandler;
import org.jasig.cas.authentication.handler.UncategorizedAuthenticationException;
import org.jasig.cas.authentication.principal.Credentials;
import com.toopher.integrations.cas.ToopherConfig;
import com.toopher.integrations.cas.authentication.principal.ToopherCredentials;
import com.toopher.api.ToopherIframe;
import org.apache.log4j.Logger;

public class ToopherAuthenticationHandler implements AuthenticationHandler {


    public class ToopherAuthenticationException extends AuthenticationException {

        public ToopherAuthenticationException(String code, String message, String type) {
            super(code, message, type);
        }
    }
    private ToopherConfig toopherConfig;
    private static final String PAIRING_DEACTIVATED = "707";
    private static final String USER_OPT_OUT = "704";
    private static final String USER_UNKNOWN = "705";
    private static final String OTHER_ERROR = "601";
    private static final String PAIRING_NOT_AUTHORIZED_SIG = "Pairing has not been authorized to authenticate";
    private static Logger logger = Logger.getLogger("com.toopher.integrations.cas");

    @Override
    public boolean authenticate(Credentials credentials) throws AuthenticationException {
        final ToopherCredentials toopherCredentials = (ToopherCredentials)credentials;
        logger.debug("Authenticate: username=" + toopherCredentials.getUsername());
        Map<String, String> validatedData = ToopherIframe.validate(toopherConfig.getConsumerSecret(), toopherCredentials.getRequestParameters(), 100);
        if (validatedData == null) {
            throw new ToopherAuthenticationException("toopher.authentication.error.invalid_signature", "Invalid signature returned by Toopher API", "toopherInvalidSignature");
        }
        if (validatedData.containsKey("session_token")) {
            String toopherAuthSessionToken = validatedData.get("session_token");
            if (!toopherAuthSessionToken.equals(toopherCredentials.getLoginTicketId())) {
                // valid data, but for a different loginTokenID!
                return false;
            }
        }
        if (validatedData.containsKey("error_code")) {
            String errorCode = validatedData.get("error_code");
            String errorMessage = validatedData.get("error_message");
            if (errorCode.equals(PAIRING_DEACTIVATED)) {
                throw new ToopherAuthenticationException("toopher.authentication.error.pairing_deactivated", "Pairing has been deactivated", "toopherPairingDeactivated");
            } else if (errorCode.equals(USER_OPT_OUT)) {
                throw new ToopherAuthenticationException("toopher.authentication.error.user_opt_out", "User has opted-out of Toopher Authentication", "toopherUserOptOut");
            } else if (errorCode.equals(USER_UNKNOWN)) {
                throw new ToopherAuthenticationException("toopher.authentication.error.user_unknown", "No matching user found in Toopher API", "toopherUserUnknown");
            } else if (errorCode.equals(OTHER_ERROR) && errorMessage.contains(PAIRING_NOT_AUTHORIZED_SIG)) {
                throw new ToopherAuthenticationException("toopher.authentication.error.pairing_not_authorized", "Pairing has not been authorized on the mobile device", "toopherPairingNotAuthorized");
            } else {
                logger.info("Unknown error returned by Toopher API: error_code = " + errorCode + ", error_message = \'" + errorMessage + "\'");
                throw new ToopherAuthenticationException("toopher.authentication.error.unknown", "Unknown error returned by Toopher API", "toopherUnknownError");
            }
        } else {
            boolean authPending = validatedData.get("pending").toLowerCase().equals("true");
            boolean authGranted = validatedData.get("granted").toLowerCase().equals("true");
            return authGranted && !authPending;
        }
    }

    @Override
    public boolean supports(Credentials credentials) {
        return (credentials.getClass() == ToopherCredentials.class);
    }

    @java.lang.SuppressWarnings("all")
    public ToopherConfig getToopherConfig() {
        return this.toopherConfig;
    }

    @java.lang.SuppressWarnings("all")
    public void setToopherConfig(final ToopherConfig toopherConfig) {
        this.toopherConfig = toopherConfig;
    }
}