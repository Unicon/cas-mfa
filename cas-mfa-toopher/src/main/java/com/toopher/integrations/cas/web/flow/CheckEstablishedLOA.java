// Generated by delombok at Mon Mar 10 08:01:35 CST 2014
package com.toopher.integrations.cas.web.flow;

import org.apache.log4j.Logger;
import java.util.Map;
import com.toopher.integrations.cas.authentication.LevelOfAssurance;
import org.jasig.cas.ticket.TicketGrantingTicket;
import org.jasig.cas.ticket.TicketGrantingTicketImpl;
import org.jasig.cas.ticket.registry.TicketRegistry;
import org.springframework.webflow.action.AbstractAction;
import org.springframework.webflow.execution.Event;
import org.springframework.webflow.execution.RequestContext;

public class CheckEstablishedLOA extends AbstractAction {

    private static Logger logger = Logger.getLogger("com.toopher.integrations.cas");
    private TicketRegistry ticketRegistry;

    protected Event doExecute(RequestContext context) throws Exception {
        logger.debug("checking LOA of existing TicketGrantingTicket");
        String ticketGrantingTicketId = (String)context.getFlowScope().get("ticketGrantingTicketId");
        TicketGrantingTicketImpl ticketGrantingTicket = (TicketGrantingTicketImpl)ticketRegistry.getTicket(ticketGrantingTicketId, TicketGrantingTicket.class);
        if (ticketGrantingTicket == null) {
            logger.debug("no existing TGT found for TGT id=" + ticketGrantingTicketId);
            return result("LOA-inadequate");
        }
        Long existingLoa = 0L;
        Map<String, Object> authAttributes = ticketGrantingTicket.getAuthentication().getAttributes();
        if (authAttributes.containsKey(LevelOfAssurance.LOA_ATTRIBUTE_NAME)) {
            existingLoa = Long.valueOf(authAttributes.get(LevelOfAssurance.LOA_ATTRIBUTE_NAME).toString());
        }
        Long requiredLoa = 0L;
        // check for LOA specified in flowScope
        if (context.getFlowScope().asMap().containsKey(LevelOfAssurance.LOA_ATTRIBUTE_NAME)) {
            requiredLoa = requiredLoa | Long.valueOf((String)context.getFlowScope().get(LevelOfAssurance.LOA_ATTRIBUTE_NAME).toString());
        }
        if ((existingLoa & requiredLoa) == existingLoa) {
            return result("LOA-requirement-met");
        } else {
            return result("LOA-inadequate");
        }
    }

    @java.lang.SuppressWarnings("all")
    public TicketRegistry getTicketRegistry() {
        return this.ticketRegistry;
    }

    @java.lang.SuppressWarnings("all")
    public void setTicketRegistry(final TicketRegistry ticketRegistry) {
        this.ticketRegistry = ticketRegistry;
    }
}